
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  isResumeUploaded Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  provider          String
  providerAccountId String  @unique
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 

model EmailVerificationToken {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId 
  userId           String   @unique @db.ObjectId
  token            String   @unique
  expireAt         DateTime
  createdAt        DateTime @default(now())
}

model PasswordResetToken {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId 
  userId           String   @unique @db.ObjectId
  token            String   @unique
  expireAt         DateTime
  isUsed           Boolean  @default(false)
  createdAt        DateTime @default(now())
}

// Course Models
model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  topic       String
  authorId    String   @map("author_id") @db.ObjectId
  isPublic    Boolean  @default(true) @map("is_public")
  views       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  chapters    CourseChapter[]
  bookmarks   CourseBookmark[]
  enrollments CourseEnrollment[]
  tests       CourseTest[]

  @@map("courses")
}

model CourseChapter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId    String   @map("course_id") @db.ObjectId
  title       String
  description String
  content     String?
  orderIndex  Int      @map("order_index")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  course   Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress ChapterProgress[]

  @@map("course_chapters")
}

model CourseBookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @map("course_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("course_bookmarks")
}

model CourseEnrollment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId     String    @map("course_id") @db.ObjectId
  userId       String    @map("user_id") @db.ObjectId
  enrolledAt   DateTime  @default(now()) @map("enrolled_at")
  completedAt  DateTime? @map("completed_at")
  isCompleted  Boolean   @default(false) @map("is_completed")
  progressPercentage Int @default(0) @map("progress_percentage")
  lastAccessedAt DateTime? @map("last_accessed_at")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("course_enrollments")
}

model ChapterProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  chapterId   String   @map("chapter_id") @db.ObjectId
  userId      String   @map("user_id") @db.ObjectId
  isCompleted Boolean  @default(false) @map("is_completed")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  chapter CourseChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([chapterId, userId])
  @@map("chapter_progress")
}

model CourseTest {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId           String    @map("course_id") @db.ObjectId
  userId             String    @map("user_id") @db.ObjectId
  questions          String
  testInstructions   String    @map("test_instructions")
  answers            String?
  evaluationResults  String?   @map("evaluation_results")
  timeLimit          Int       @map("time_limit") @default(180)
  passingScore       Int       @map("passing_score") @default(80)
  totalMarks         Int       @map("total_marks") @default(100)
  marksObtained      Float?    @map("marks_obtained")
  score              Int?
  hasPassed          Boolean?  @map("has_passed")
  status             String    @default("in_progress")
  createdAt          DateTime  @default(now()) @map("created_at")
  submittedAt        DateTime? @map("submitted_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId, createdAt])
  @@map("course_tests")
}

// Podcast


model Podcast {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  knowledgeBase String   @map("knowledge_base")
  length        String   // "Short", "Medium", "Long"
  script        String?
  audioPath     String?  @map("audio_path")
  videoPath     String?  @map("video_path")
  status        String   @default("pending") // "pending", "processing", "completed", "error"
  errorMessage  String?  @map("error_message")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("podcasts")
}
